package ${package.Controller};
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import ${package.Entity}.${entity};
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;
import java.util.Map;
#if(${restControllerStyle})
#else
#end
#if(${superControllerClassPackage})
    ${superControllerClassPackage};

#end

/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 */
@Api(tags = {"${table.comment}"}, produces = "${table.comment}相关接口")
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping(value = "#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end", produces = MediaType.APPLICATION_JSON_VALUE)
#if(${superControllerClass})
@Validated
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end

@Autowired
private ${table.serviceName} ${table.entityPath}Service;

/**
    * 查询分页数据
    */
@ApiImplicitParams({
        @ApiImplicitParam(name = "page", value = "页码"),
        @ApiImplicitParam(name = "limit", value = "每页条数"),
        @ApiImplicitParam(name = "field", value = "排序的字段名"),
        @ApiImplicitParam(name = "order", value = "asc or desc"),
        @ApiImplicitParam(name = "searchRelation", value = "模糊搜索的关系,or or eq ,与searchname一一对应"),
        @ApiImplicitParam(name = "searchname", value = "模糊搜索,k,v 的形式k为字段名，v为模糊搜索"),
        @ApiImplicitParam(name = "Type", value = "筛选类型，k,v 的形式k为字段名，v为筛选的值"),
        @ApiImplicitParam(name = "entityList", value = "传递entity的名字，校验传递的参数名，防止sql注入"),
})
@ApiOperation(value = "查询分页数据", httpMethod = "GET",
        notes = "searchRelation 与 searchname 一一对应 , 否则不生效\n" +
        "字段名如下\n" +
    #foreach($field in ${table.fields})
            "       ${field.propertyName}  ${field.comment} \n" #if($foreach.hasNext)+#end
    #end
)
        @RequestMapping(value = "/list", method = RequestMethod.GET)
        public Msg findListByPage(@RequestParam(name = "page", defaultValue = "1") Integer page,
@RequestParam(name = "limit", defaultValue = "10") Integer limit,
@RequestParam(name = "field", required = false) String field,
@RequestParam(name = "order", required = false) String order,
@RequestParam(name = "searchRelation", required = false) List<String> searchRelation,
@RequestParam(name = "searchname", required = false) Map<String, Object> searchname,
@RequestParam(name = "Type", required = false) Map<String, Object> Type,
@RequestParam(name = "entityList", required = false) List<String> entityList){
        return  ${table.entityPath}Service.findListByPage(page,limit,field,order,searchRelation,searchname,Type);
        }


/**
 * 根据id查询
 */
@ApiOperation(value = "根据id查询数据")
@RequestMapping(value = "/getById", method = RequestMethod.GET)
public Msg getById(@RequestParam("pkid") String pkid){
        return  ${table.entityPath}Service.getById(pkid);
        }

/**
 * 新增
 */
@ApiOperation(value = "新增数据")
@RequestMapping(value = "/add", method = RequestMethod.POST)
public Msg add(@RequestBody ${entity} ${table.entityPath}){
        return  ${table.entityPath}Service.add(${table.entityPath});
        }

/**
 * 删除
 */
@ApiOperation(value = "删除数据")
@RequestMapping(value = "/del", method = RequestMethod.DELETE)
public Msg delete(@RequestParam("ids") List<String> ids){
        return  ${table.entityPath}Service.delete(ids);
        }

/**
 * 修改
 */
@ApiOperation(value = "更新数据")
@RequestMapping(value = "/update", method = RequestMethod.PUT)
public Msg update(@RequestBody ${entity}  ${table.entityPath}){
        return  ${table.entityPath}Service.update(${table.entityPath});
        }


        }
