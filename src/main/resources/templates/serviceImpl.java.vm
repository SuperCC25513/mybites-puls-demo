package ${package.ServiceImpl};
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import ${package.Entity}.${entity};
import ${package.Mapper}.${table.mapperName};
import ${package.Service}.${table.serviceName};
import ${superServiceImplClassPackage};
import org.springframework.util.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.List;
/**
 * <p>
 * $!{table.comment} 服务实现类
 * </p>
 *
 * @author ${author}
 */
@Slf4j
@Service
#if(${kotlin})
open class ${table.serviceImplName} : ${superServiceImplClass}<${table.mapperName}, ${entity}>(), ${table.serviceName} {

        }
#else
        public class ${table.serviceImplName} extends ${superServiceImplClass}<${table.mapperName}, ${entity}>implements ${table.serviceName} {

        @Autowired
        private  ${table.mapperName} ${table.entityPath}Dao;

        @Override
        public Msg findListByPage(Integer page,Integer limit,String field,String order,String searchname,Integer type){
        Msg msg=new Msg();
        try{
        PageHelper.startPage(page,limit);
        QueryWrapper queryWrapper=new QueryWrapper();
        if(!StringUtils.isEmpty(order)&&!StringUtils.isEmpty(field)){
        if("desc".equals(order)){
        queryWrapper.orderBy(true,false,field);
        }else{
        queryWrapper.orderBy(true,true,field);
        }
        }
        if(!StringUtils.isEmpty(searchname)){
        //更换成业务需要的模糊搜索
        queryWrapper.like("id","%"+searchname+"%");
        }
        if(type!=null){
        //更换成业务需要的类型搜索
        queryWrapper.eq("id",type);
        }
        //      业务代码start

        queryWrapper.eq("status",1);

        //      业务代码end
        List<${entity}>list= ${table.entityPath}Dao.selectList(queryWrapper);
        if(list.size()>0){
        PageInfo<${entity}>pageInfo=new PageInfo(list);
        msg.setCode(Code.layuisucess);
        msg.setMsg(Code.layuisucessMsg);
        msg.setCount(pageInfo.getTotal());
        msg.setData(pageInfo.getList());
        }else{
        msg.setCode(Code.layuisucess);
        msg.setMsg(Code.sucessMsgOk4);
        }
        }catch(Exception e){
        e.printStackTrace();
        log.error("error: {}",e);
        msg.setCode(Code.error);
        msg.setMsg(Code.errorMsg);
        }
        return msg;
        }

        @Override
        public Msg getById(String pkid){
        Msg msg=new Msg();
        try{
        if(StringUtils.isEmpty(pkid)){
        msg.Paramerror();
        return msg;
        }
    ${entity} ${table.entityPath} = ${table.entityPath}Dao.selectById(pkid);
        msg.setData(${table.entityPath});
        msg.SelectOkLayui();
        }catch(Exception e){
        e.printStackTrace();
        log.error("error: {}",e);
        msg.setCode(Code.error);
        msg.setMsg(Code.errorMsg);
        }
        return msg;
        }

        @Override
        public Msg add(${entity} ${table.entityPath}){
        Msg msg=new Msg();
        try{
        if(StringUtils.isEmpty(${table.entityPath})){
        msg.Paramerror();
        return msg;
        }
        int insert= ${table.entityPath}Dao.insert(${table.entityPath});
        if(insert>0){
        msg.insertOk();
        }else{
        msg.insertErr();
        }
        }catch(Exception e){
        e.printStackTrace();
        log.error("error: {}",e);
        msg.setCode(Code.error);
        msg.setMsg(Code.errorMsg);
        }
        return msg;
        }

        @Override
        public Msg delete(List<String>ids){
        Msg msg=new Msg();
        try{
        if(ids.isEmpty()){
        msg.Paramerror();
        return msg;
        }
        int i= ${table.entityPath}Dao.deleteBatchIds(ids);
        if(i>0){
        msg.DelOk();
        }else{
        msg.DelErr();
        }
        }catch(Exception e){
        e.printStackTrace();
        log.error("error: {}",e);
        msg.setCode(Code.error);
        msg.setMsg(Code.errorMsg);
        }
        return msg;
        }

        @Override
        public Msg update(${entity} ${table.entityPath}){
        Msg msg=new Msg();
        try{
        if(StringUtils.isEmpty(${table.entityPath})){
        msg.Paramerror();
        return msg;
        }
        int i= ${table.entityPath}Dao.updateById(${table.entityPath});
        if(i>0){
        msg.UpdateOk();
        }else{
        msg.UpdateErr();
        }
        }catch(Exception e){
        e.printStackTrace();
        log.error("error: {}",e);
        msg.setCode(Code.error);
        msg.setMsg(Code.errorMsg);
        }
        return msg;
        }

        }
#end
